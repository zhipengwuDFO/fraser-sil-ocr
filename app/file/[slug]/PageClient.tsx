"use client";
import React, { useState, useEffect } from "react";
import ReadPDF from "./parts/ReadPDF";
import RenderJson from "./parts/RenderJson";
import { Button } from "@mui/material";
import getFileNames from "@/app/utility/getFileName";
import { useRouter } from "next/navigation";
import {LetsIconsCheckFill} from "@/app/components/Icons";
type Props = {
  slug: string;
};

const PageClient = (props: Props) => {
  const [isShowPDF, setIsShowPDF] = useState(true);
  const [fileNames, setFileNames] = useState<string[]>([]);
  const [indexOfSlug, setIndexOfSlug] = useState<number>(0);
  const [isVerified, setIsVerified] = useState(false);
  const [isPrev, setIsPrev] = useState(false);
  const [isNext, setIsNext] = useState(false);
  const { slug } = props;

  const router = useRouter();

  const allFiles = async () => {
    const data = await getFileNames();
    setFileNames(data);
    let fileName = slug + ".json";
    const index = data.findIndex((item: string) => item === fileName);

    setIndexOfSlug(index);

    if (index <= 0) {
      setIsPrev(false);
    } else {
      setIsPrev(true);
    }
    if (index >= data.length - 1) {
      setIsNext(false);
    } else {
      setIsNext(true);
    }
  };

  useEffect(() => {
    allFiles();
  }, []);

  const handlePrev = () => {
    let fileName = fileNames[indexOfSlug - 1];
    router.push(`/file/${fileName.replace(".json", "")}`);
    // go to previous file
  };
  const handleNext = () => {
    let fileName = fileNames[indexOfSlug + 1];
    router.push(`/file/${fileName.replace(".json", "")}`);
    // go to next file
  };

  return (
    <div className="grid grid-cols-12 gap-5 px-2 ">
      <div className="col-span-12 flex justify-between items-center pt-2">
        <div className="flex gap-2 ">
          <Button
            variant="outlined"
            color="primary"
            disabled={!isPrev}
            onClick={handlePrev}
          >
            &lt;&lt; Previous
          </Button>
          <Button
            variant="contained"
            color="primary"
            onClick={() => router.push("/")}
          >
            Home
          </Button>
        </div>
        <div className="flex gap-2 items-center">

    
        <h1 className=" text-md font-semibold">{slug.replace(/_/g, " ")} </h1> 
        {isVerified?<LetsIconsCheckFill className="text-green-500" />: ""}
        </div>
        <Button
          variant="outlined"
          color="primary"
          disabled={!isNext}
          onClick={handleNext}
        >
          Next &gt;&gt;
        </Button>
      </div>
      <div className={`col-span-3 border  rounded-md p-2 flex flex-col gap-2
        bg-green-50
        `}>
        <h1 className="font-semibold">NOTE:</h1>
        <div className={`self-center`}>
          <p> <span className="text-red-500">Red text </span>indicates low confidence (&lt;0.8). </p>
         
          <p>  <span className="bg-yellow-200">Highlighted text</span> indicates the text has been edited.</p>
        </div>
      </div>
  

      <div className={`col-span-9 border  rounded-md p-2 flex flex-col gap-2
        ${isVerified ? "bg-green-50":"bg-yellow-50"  }
        `}>
        <h1 className="font-semibold">QA/QC Result:</h1>
        <div className={`${isVerified? 'text-green-700':'text-red-500'} self-center`}>
          This section displays the QA/QC results generated by the large
          language model (LLM). It describes potential errors detected in the
          OCR output.
        </div>
      </div>
 

      <RenderJson
        className={` ${isShowPDF ? "col-span-6" : "col-span-12"} `}
        slug={slug}
      />
      {isShowPDF && <ReadPDF className="col-span-6" slug={slug} />}

      <div className="fixed bottom-14 right-3  opacity-50 hover:opacity-100">
        <Button className="self-center " variant="contained" color={isVerified ? "success" : "error"}
          onClick={() => setIsVerified(!isVerified)}
        >
          {isVerified ? "Unverify" : "Verify"}
        </Button>
      </div>
      <div className="fixed bottom-2 right-3  opacity-40 hover:opacity-100">
        <Button
          onClick={() => setIsShowPDF(!isShowPDF)}
          variant="contained"
          color="primary"
        >
          {isShowPDF ? "Hide PDF" : "Show PDF"}
        </Button>
      </div>
    </div>
  );
};

export default PageClient;
